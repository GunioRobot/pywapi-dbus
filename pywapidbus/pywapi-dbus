#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    Copyright 2011 Sasu Karttunen <sasu.karttunen@tpnet.fi>
#
#    This file is part of D-Bus Python Weather API Service (pywapi-dbus).
#
#    pywapi-dbus is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    pywapi-dbus is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with pywapi-dbus.  If not, see <http://www.gnu.org/licenses/>.

# About information, REMEMBER TO CHANGE IN main.py TOO! Should invent a better system here.
__author__=("Sasu Karttunen")
__email__=("sasu.karttunen@tpnet.fi")
__version__=("0.1.1")
__website__=("https://github.com/skfin/pywapi-dbus")

__help__=("""Usage: %s start|stop|restart
\nPython Weather API DBus Service (pywapi-dbus)
Version: """+__version__+"\n"+__website__+"""
\nOptions:
  --debug         Starts pywapi-dbus in debug mode
  --version       Shows version information""")

from sys import argv, exit
from os import path, makedirs, environ
from pywapidbus.daemon import Daemon

pidfile = path.join(environ['HOME'], '.pywapi-dbus', 'pywapi-dbus.pid')
directoryname = path.dirname(pidfile)
if not path.exists(directoryname):
    makedirs(directoryname)

pidfileString = str(pidfile)

DEBUG = False
 
class MyDaemon(Daemon):
        def run(self):
                import pywapidbus.main	
 
if __name__ == "__main__":
        daemon = MyDaemon(pidfileString)
        if len(argv) == 2:
                if '--version' == argv[1]:
                        print (__version__)
                elif '--help' == argv[1]:
                        print (__help__ % argv[0])
                elif 'start' == argv[1]:
                        daemon.start(DEBUG)
                elif 'stop' == argv[1]:
                        daemon.stop()
                elif 'restart' == argv[1]:
                        daemon.restart(DEBUG)
                else:
                        print "Invalid arguments.\nUsage: %s start|stop|restart (--debug)" % argv[0]
                        exit(2)
                exit(0)
        elif len(argv) == 3:
        		if 'start' == argv[1] and '--debug' in argv[2]:
        				DEBUG = True
        				daemon.start(DEBUG)
        		elif 'restart' == argv[1] and '--debug' in argv[2]:
        				DEBUG = True
        				daemon.restart(DEBUG)
        		else:
        				print "Invalid arguments.\nUsage: %s start|stop|restart (--debug)" % argv[0]
        				exit(2)
        else:
                print "usage: %s start|stop|restart (--debug)" % argv[0]
                exit(2)